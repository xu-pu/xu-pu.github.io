<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://xupu.me/feed.xml" rel="self" type="application/atom+xml"/><link href="https://xupu.me/" rel="alternate" type="text/html" hreflang="en"/><updated>2023-07-11T14:00:10+00:00</updated><id>https://xupu.me/feed.xml</id><title type="html">blank</title><subtitle>Paul Xu&apos;s Homepage</subtitle><entry><title type="html">Hello, World!</title><link href="https://xupu.me/blog/2022/hello-world/" rel="alternate" type="text/html" title="Hello, World!"/><published>2022-05-26T00:00:00+00:00</published><updated>2022-05-26T00:00:00+00:00</updated><id>https://xupu.me/blog/2022/hello-world</id><content type="html" xml:base="https://xupu.me/blog/2022/hello-world/"><![CDATA[<p>As I’m about to start a new chapter in life, it’s a good opportunity create a new homepage. I found <a href="https://github.com/alshedivat/al-folio">al-folio</a> to be an excellent choice. It’s a <a href="https://jekyllrb.com/">Jekyll</a> theme designed for academics, and can be hosted using <a href="https://pages.github.com/">GitHub Pages</a>.</p> <p>Just like most modern web technologies, it’s a bit convoluted at first glance. Here is a TL;DR description about how it works: The actual website are static files, stored in the <code class="language-plaintext highlighter-rouge">_site</code> directory. They are compiled from configuration, markdown and template files using <code class="language-plaintext highlighter-rouge">jekyll build</code> command. When using <a href="https://github.com/alshedivat/al-folio">al-folio</a>, the <code class="language-plaintext highlighter-rouge">_site</code> directory on your main branch is empty and ignored by git. Every time you push modifications to GitHub, a <a href="https://github.com/features/actions">GitHub Action</a> is triggered. GitHub’s servers will then compile your website and save it to another branch called <code class="language-plaintext highlighter-rouge">gh-pages</code>, which is used by GitHub to host your website.</p> <p>Setting it up is relatively straightforward, just follow the step-by-step instructions in <a href="https://github.com/alshedivat/al-folio">al-folio</a>’s <code class="language-plaintext highlighter-rouge">README.md</code>. But there are some caveats it did not cover.</p> <h3 id="caveat-1---custom-domain-name-and-https">Caveat 1 - Custom Domain Name and HTTPS</h3> <p>I encountered this error message when trying to enable HTTPS.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Certificate Request Error: Certificate provisioning will retry automatically in a short period, please be patient.
</code></pre></div></div> <p>In my specific case, the solution is very counterintuitive. GitHub won’t issue the TLS certificate unless the <code class="language-plaintext highlighter-rouge">www</code> CNAME record of your domain name points to <code class="language-plaintext highlighter-rouge">your-username.github.io</code>. See this <a href="https://github.community/t/certificate-request-error-is-persistent-tls-certificate-cant-be-provisioned/11008/17">answer</a>.</p> <h3 id="caveat-2---macos-and-ruby">Caveat 2 - macOS and Ruby</h3> <p>When using <a href="https://github.com/alshedivat/al-folio">al-folio</a>, some dependencies won’t compile if you are using the builtin ruby on macOS. The easiest fix I found is to install ruby through <code class="language-plaintext highlighter-rouge">brew</code>, then add</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"/usr/local/opt/ruby/bin:</span><span class="nv">$PATH</span><span class="s2">"</span>
</code></pre></div></div> <p>to your rc files. This will make the shell choose the ruby from <code class="language-plaintext highlighter-rouge">brew</code> over the system default. Technically, there are more elegant solutions using the <code class="language-plaintext highlighter-rouge">virtualenv</code> equivalent for ruby. But let’s be honest, we don’t want to learn ruby. :man_shrugging:</p> <h3 id="caveat-3---custom-domain-name-and-cname-file">Caveat 3 - Custom Domain Name and CNAME File</h3> <p>At this point, every time you push changes to GitHub, your settings for custom domain name will be gone (you will get a 404 error). To fix this, you should add a file on your main branch named <code class="language-plaintext highlighter-rouge">CNAME</code> containing the domain name you want to use.</p> <p>The reason is, when you set custom domain name through the GitHub menu, what it actually does is add a file named <code class="language-plaintext highlighter-rouge">CNAME</code> containing that domain name, on the <code class="language-plaintext highlighter-rouge">gh-pages</code> branch. Every time you push changes to GitHub, the <code class="language-plaintext highlighter-rouge">gh-pages</code> branch is purged and recreated, so is the <code class="language-plaintext highlighter-rouge">CNAME</code> file in it.</p> <p>Just to be safe, I also set up <a href="https://www.checklyhq.com/">a free domain monitor</a>. It will send me an email when the website is down.</p> <hr/> <p>Other than these caveats, I really enjoyed this setup. Highly recommend <a href="https://github.com/alshedivat/al-folio">al-folio</a> for making your personal homepage.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Caveats about GitHub Pages, Jekyll and al-folio theme.]]></summary></entry></feed>